<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Zack McCauley - WardsParadox</title>
    <link>https://wardsparadox.github.io/</link>
    <description>Recent content on Zack McCauley - WardsParadox</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Wed, 18 Sep 2019 11:57:36 -0600</lastBuildDate>
    
        <atom:link href="https://wardsparadox.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Munki URL Redirector</title>
      <link>https://wardsparadox.github.io/2019/09/munki-url-redirector/</link>
      <pubDate>Wed, 18 Sep 2019 11:57:36 -0600</pubDate>
      
      <guid>https://wardsparadox.github.io/2019/09/munki-url-redirector/</guid>
      <description>&lt;p&gt;Due to recent requests by staff who are struggling to find software in the Managed Software Center, I tried to find a way to send links to the users via email when they have requested. We use GSuite for Education, and Gmail will strip any links that have custom URL Schemes (like what Munki uses &lt;code&gt;munki://&lt;/code&gt;) for security reasons.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>uBlock Origin Admin Settings Deployment</title>
      <link>https://wardsparadox.github.io/2019/02/ublock-origin-admin-settings-deployment/</link>
      <pubDate>Wed, 27 Feb 2019 00:00:00 +0000</pubDate>
      
      <guid>https://wardsparadox.github.io/2019/02/ublock-origin-admin-settings-deployment/</guid>
      <description>&lt;p&gt;As our district has made the decision to push out uBlock, we had to include a whitelist. The documentation on uBlock&#39;s github wiki was not clear enough for me on how to deploy settings. On the macOS side of things, pushing out the configuration profile was easy enough, but the ChromeOS configuration was a bit trickier.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Google Packages and Munki</title>
      <link>https://wardsparadox.github.io/2018/10/google-packages-and-munki/</link>
      <pubDate>Tue, 16 Oct 2018 00:00:00 +0000</pubDate>
      
      <guid>https://wardsparadox.github.io/2018/10/google-packages-and-munki/</guid>
      <description>&lt;p&gt;On a few machines, I&#39;ve been getting Munki errors related to the Chrome Remote Desktop Host update packages, and the Google Drive FileStream packages. The packages fail when you disable the Keystone Agent via Profile or via the MasterDisable key in &lt;code&gt;/Library/Preferences/com.google.Keystone.plist&lt;/code&gt;. As we deploy these updates through Munki via AutoPkg, I found that I needed to disable the GoogleSoftwareUpdate package bundled with both of these.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Force a DEP sync..from your phone!</title>
      <link>https://wardsparadox.github.io/2018/09/force-a-dep-sync..from-your-phone/</link>
      <pubDate>Thu, 20 Sep 2018 00:00:00 +0000</pubDate>
      
      <guid>https://wardsparadox.github.io/2018/09/force-a-dep-sync..from-your-phone/</guid>
      <description>&lt;p&gt;I&#39;ve used Workflow in the past, but I hadn&#39;t really fully explored it as &amp;quot;click this&amp;quot; instead of &amp;quot;launch this app and run this real quick&amp;quot; never bothered me. Things have changed since then. Hello to Siri Shortcuts in iOS 12! I can now run things by voice.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Modifying Safari&#39;s Auto-Play Preferences</title>
      <link>https://wardsparadox.github.io/2018/04/modifying-safaris-auto-play-preferences/</link>
      <pubDate>Wed, 04 Apr 2018 00:00:00 +0000</pubDate>
      
      <guid>https://wardsparadox.github.io/2018/04/modifying-safaris-auto-play-preferences/</guid>
      <description>&lt;p&gt;I saw an interesting question today on the MacAdmins Slack regarding setting the Auto-Play preferences introduced in 10.13&#39;s Safari.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://wardsparadox.github.io/images/2018/04/screencap.png&#34; alt=&#34;slack screencap&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Curiosity took hold.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Setting up MunkiReport-PHP on Ubuntu 16 with Nginx</title>
      <link>https://wardsparadox.github.io/2018/02/setting-up-munkireport-php-on-ubuntu-16-with-nginx/</link>
      <pubDate>Wed, 14 Feb 2018 00:00:00 +0000</pubDate>
      
      <guid>https://wardsparadox.github.io/2018/02/setting-up-munkireport-php-on-ubuntu-16-with-nginx/</guid>
      <description>&lt;p&gt;This post is still really rough, but should be fully functional.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Faster Munki Downloads from Nginx</title>
      <link>https://wardsparadox.github.io/2018/01/faster-munki-downloads-from-nginx/</link>
      <pubDate>Mon, 29 Jan 2018 00:00:00 +0000</pubDate>
      
      <guid>https://wardsparadox.github.io/2018/01/faster-munki-downloads-from-nginx/</guid>
      <description>&lt;p&gt;Through multiple issues over the last month or so, I decided to completely rebuild my Munki server. This server is semi-critical in our district as all configurations are now sent out via Munki. As I was waiting for Ubuntu 16 to install and do some base configurations, I started looking for some guides on how to increase performance. I stumbled across &lt;a href=&#34;http://nginx.org/en/docs/ngx_core_module.html#worker_cpu_affinity&#34;&gt;worker_cpu_affinity&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Deploying DetectX Swift with Munki</title>
      <link>https://wardsparadox.github.io/2018/01/deploying-detectx-swift-with-munki/</link>
      <pubDate>Mon, 15 Jan 2018 00:00:00 +0000</pubDate>
      
      <guid>https://wardsparadox.github.io/2018/01/deploying-detectx-swift-with-munki/</guid>
      <description>&lt;p&gt;DetectX Swift is an alternative to MalwareBytes Anti-Malware and was more economical for our district to use. It also is faster and more what we were looking for. I highly recommend it! This is a write up based on how we are deploying it here.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Dock-maintainer: Defined</title>
      <link>https://wardsparadox.github.io/2017/05/dock-maintainer-defined/</link>
      <pubDate>Mon, 29 May 2017 00:00:00 +0000</pubDate>
      
      <guid>https://wardsparadox.github.io/2017/05/dock-maintainer-defined/</guid>
      <description>&lt;p&gt;Recently I created a tool called dock-maintainer. This post goes over a couple things but mainly serves to explain why I created it and why I needed it instead of using other solutions. Traditionally this job (maintaining Dock configurations) has been handled in a multitude of ways. There have been many ways to do this. One can use configuration profiles, puppet/salt/chef/etc, &lt;code&gt;outset&lt;/code&gt; with a script (a method I used until recently).&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Hello-IT Setup and Deployment</title>
      <link>https://wardsparadox.github.io/2017/05/hello-it-setup-and-deployment/</link>
      <pubDate>Fri, 12 May 2017 00:00:00 +0000</pubDate>
      
      <guid>https://wardsparadox.github.io/2017/05/hello-it-setup-and-deployment/</guid>
      <description>&lt;p&gt;I have recently been playing with a tool called &lt;a href=&#34;https://github.com/ygini/Hello-IT&#34;&gt;Hello IT&lt;/a&gt;. It has been a wonderful tool in testing and I am getting excited to send it out here in our district. I believe it will help our staff be able to communicate to us effectively. Our current layout looks like this:
&lt;img src=&#34;https://wardsparadox.github.io/images/2017/05/HelloIT Menu Layout.jpg&#34; alt=&#34;helloIT Menu Layout&#34; /&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>I made a thing..well sorta</title>
      <link>https://wardsparadox.github.io/2016/11/i-made-a-thing..well-sorta/</link>
      <pubDate>Tue, 29 Nov 2016 00:00:00 +0000</pubDate>
      
      <guid>https://wardsparadox.github.io/2016/11/i-made-a-thing..well-sorta/</guid>
      <description>It seems that I have learned A LOT in recent months concerning Python. Again huge shout out to Nick McSpadden and froger for helping me get to where I am knowledge wise today. In between now and my last post, Nick helped me understand the dict datatype. Turns out python can use translate dict into the plist equivalents! The more you know eh?
The reason he was helping me on this was because I had an idea to take his PrinterGenerator tool and make it work in a different way.</description>
    </item>
    
    <item>
      <title>TIL 03 -- Get Model Info via Python via Serial</title>
      <link>https://wardsparadox.github.io/2016/06/til-03-get-model-info-via-python-via-serial/</link>
      <pubDate>Mon, 27 Jun 2016 00:00:00 +0000</pubDate>
      
      <guid>https://wardsparadox.github.io/2016/06/til-03-get-model-info-via-python-via-serial/</guid>
      <description>A while back I learned about this website, Apple Config Code Lookup, when I was building my first info grab script for an inventory. I have since evolved that script into a full Info Viewer (inventory is done via MunkiReport-PHP). One thing I was always missing was the output from the Apple Config Code Lookup; since I am migrating most of my shell scripts to Python, I figured I might as well add it.</description>
    </item>
    
    <item>
      <title>TIL 02 - Multiple Inputs For One Argument</title>
      <link>https://wardsparadox.github.io/2016/06/til-02-multiple-inputs-for-one-argument/</link>
      <pubDate>Sun, 05 Jun 2016 00:00:00 +0000</pubDate>
      
      <guid>https://wardsparadox.github.io/2016/06/til-02-multiple-inputs-for-one-argument/</guid>
      <description>I use a tool called Outset Dock Profiler made by Nick McSpadden. It&#39;s great and for user accounts where I only need to target one profile, it works great! {% icon fa-thumbs-o-up fg-lg &amp;gt;}}
There has always been one thing about it that bothered me. If I had multiple profiles for a user, I couldn&#39;t use this tool. Sure I could use it to build an initial package and modify the script.</description>
    </item>
    
    <item>
      <title>TIL 01 - Get a OS X Preference via python</title>
      <link>https://wardsparadox.github.io/2016/03/til-01-get-a-os-x-preference-via-python/</link>
      <pubDate>Sun, 06 Mar 2016 00:00:00 +0000</pubDate>
      
      <guid>https://wardsparadox.github.io/2016/03/til-01-get-a-os-x-preference-via-python/</guid>
      <description>As I am trying to learn more of the Python programming language (version 2.7.* as that is what is currently built-in to OS X), I find little challenges to help process what I have learned of it. Recently I was introduced to the Foundation frameworks that come with OS X. For a while I was writing scripts that required plistlib which could only read the XML version of a plist. OS X stores preferences in binary plist form.</description>
    </item>
    
    <item>
      <title>TIL 00 - Welcome to Today I Learned</title>
      <link>https://wardsparadox.github.io/2016/03/til-00-welcome-to-today-i-learned/</link>
      <pubDate>Fri, 04 Mar 2016 00:00:00 +0000</pubDate>
      
      <guid>https://wardsparadox.github.io/2016/03/til-00-welcome-to-today-i-learned/</guid>
      <description>Welcome to a series called Today I Learned. This is a series primarily dedicated to documenting things I&#39;ve learned. Thank you for reading, I hope you enjoy or learn something as well!</description>
    </item>
    
    <item>
      <title>Adding a &#34;Coming Soon&#34; Ribbon to the Munki Showcase</title>
      <link>https://wardsparadox.github.io/2015/12/adding-a-coming-soon-ribbon-to-the-munki-showcase/</link>
      <pubDate>Sat, 12 Dec 2015 00:00:00 +0000</pubDate>
      
      <guid>https://wardsparadox.github.io/2015/12/adding-a-coming-soon-ribbon-to-the-munki-showcase/</guid>
      <description>I have been doing some testing and it seems that with the latest OS X El Capitan release, our district can finally move to El Capitan. At the same time I have been doing some testing of Office 2016 for Mac. I have been moving our district to deploying software with Munki. It&#39;s been two years and has already saved us hundreds of man hours.
I was aware of the conditional items ability with Munki.</description>
    </item>
    
    <item>
      <title>Destiny Ghost</title>
      <link>https://wardsparadox.github.io/projects/destiny-ghost/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://wardsparadox.github.io/projects/destiny-ghost/</guid>
      <description> Pulls data out of your Follett Destiny/Asset Manager and changes values on the machine to match. </description>
    </item>
    
  </channel>
</rss>